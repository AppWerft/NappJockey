/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package dk.napp.jockey;

import java.util.HashMap;

import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.os.Handler;
import android.os.Message;


@Kroll.proxy(name="WebView", creatableInModule=DkNappJockeyModule.class, propertyAccessors = {
	TiC.PROPERTY_URL
})
public class DkNappJockeyWebViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String TAG = "DkNappJockeyWebViewProxy";
	private static final int MSG_FIRST_ID = TiViewProxy.MSG_LAST_ID + 1;

	private static final int MSG_GO_BACK = MSG_FIRST_ID + 101;
	private static final int MSG_GO_FORWARD = MSG_FIRST_ID + 102;
	private static final int MSG_RELOAD = MSG_FIRST_ID + 103;
	private static final int MSG_STOP_LOADING = MSG_FIRST_ID + 104;
	private static final int MSG_CAN_GO_BACK = MSG_FIRST_ID + 108;
	private static final int MSG_CAN_GO_FORWARD = MSG_FIRST_ID + 109;

	protected static final int MSG_LAST_ID = MSG_FIRST_ID + 999;
	
	private DkNappJockeyWebView webView;

	// Constructor
	public DkNappJockeyWebViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity) {
		webView = new DkNappJockeyWebView(this);
		return webView;
	}
	
	public DkNappJockeyWebView getWebView()
	{
		return (DkNappJockeyWebView) getOrCreateView();
	}

	// Methods
	@Kroll.method
	public void sendJockeyData(String eventName, Object data )
	{
		webView.sendJockeyEvent(eventName, data);
	}
	
	// we use onHasListenersChanged to hook into the titanium SDK for adding an eventlistener.
	// we cannot just override addEventListener
	// onHasListenersChanged is called in KrollProxy
	// src: https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/kroll/KrollProxy.java#L900
	@Override
	public void onHasListenersChanged(final String eventName, boolean hasListeners)
	{
		// We only want too add a listener to Jockey - when JS calls addEventListener
		// This is done when hasListeners is true
		if(hasListeners){
			if (webView != null) {
				webView.setJockeyListener(eventName);
			} else {  
				// Wait 500 ms 
				new Handler().postDelayed(new Runnable()
				{
					@Override
					public void run() {
					if (webView != null)
							webView.setJockeyListener(eventName);
					}
				}, 500);
			}
		}
		
		super.onHasListenersChanged(eventName, hasListeners);
	}
	
	@Override
	public boolean handleMessage(Message msg)
	{
		if (peekView() != null) {
			switch (msg.what) {
				case MSG_GO_BACK:
					getWebView().goBack();
					return true;
				case MSG_GO_FORWARD:
					getWebView().goForward();
					return true;
				case MSG_RELOAD:
					getWebView().reload();
					return true;
				case MSG_STOP_LOADING:
					getWebView().stopLoading();
					return true;
				case MSG_CAN_GO_BACK: {
					AsyncResult result = (AsyncResult) msg.obj;
					result.setResult(getWebView().canGoBack());
					return true;
				}
				case MSG_CAN_GO_FORWARD: {
					AsyncResult result = (AsyncResult) msg.obj;
					result.setResult(getWebView().canGoForward());
					return true;
				}
			}
		}
		return super.handleMessage(msg);
	}
	
	@Kroll.method
	public void goBack()
	{
		getMainHandler().sendEmptyMessage(MSG_GO_BACK);
	}

	@Kroll.method
	public void goForward()
	{
		getMainHandler().sendEmptyMessage(MSG_GO_FORWARD);
	}

	@Kroll.method
	public void reload()
	{
		getMainHandler().sendEmptyMessage(MSG_RELOAD);
	}

	@Kroll.method
	public void stopLoading()
	{
		getMainHandler().sendEmptyMessage(MSG_STOP_LOADING);
	}
	
	@Kroll.method
	public boolean canGoBack()
	{
		if (peekView() != null) {
			if (TiApplication.isUIThread()) {
				return getWebView().canGoBack();
			} else {
				return (Boolean) TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_CAN_GO_BACK));
			}
		}
		return false;
	}
	
	@Kroll.method
	public boolean canGoForward()
	{
		if (peekView() != null) {
			if (TiApplication.isUIThread()) {
				return getWebView().canGoForward();
			} else {
				return (Boolean) TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_CAN_GO_FORWARD));
			}
		}
		return false;
	}
}